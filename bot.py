import os
import json
import threading
import logging
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from google.oauth2.service_account import Credentials
import gspread

# --- Dummy —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Biom Assistant is alive.")

def run_dummy_server():
    port = int(os.environ.get("PORT", 10000))
    print(f"üöÄ Dummy —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    server = HTTPServer(("", port), DummyHandler)
    server.serve_forever()

# üîÑ –ó–∞–ø—É—Å–∫–∞—î–º–æ dummy-—Å–µ—Ä–≤–µ—Ä —Ñ–æ–Ω–æ–º
threading.Thread(target=run_dummy_server).start()

# üîê –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# üîê –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
creds_json = os.getenv("GOOGLE_CREDS")
creds_dict = json.loads(creds_json)

# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets –∑ READ-ONLY scopes
scopes = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
google_creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
client = gspread.authorize(google_creds)

# üß† –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –∫–æ–¥ —Ç–æ–≤–∞—Ä—É (–∞—Ä—Ç–∏–∫—É–ª), —ñ —è –∑–Ω–∞–π–¥—É –π–æ–≥–æ —É Google Sheets üîç"
    )

# üîç –û–±—Ä–æ–±–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
async def handle_article(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()

    if not code.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –ª–∏—à–µ —á–∏—Å–ª–æ–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª.")
        return

    try:
        sheet = client.open("Biom BOT").sheet1
        records = sheet.get_all_records()

        match = next((r for r in records if str(r.get("–ö–æ–¥")).strip() == code), None)

        if match:
            name = match.get("–ù–∞–∑–≤–∞", "–ù–µ–≤—ñ–¥–æ–º–æ")
            price = match.get("–¶—ñ–Ω–∞", "‚Äî")
            stock = match.get("–ù–∞—è–≤–Ω—ñ—Å—Ç—å", "‚Äî")
            await update.message.reply_text(
                f"üì¶ –ù–∞–∑–≤–∞: {name}\nüí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω\nüìç –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {stock}"
            )
        else:
            await update.message.reply_text("üòï –ö–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ.")
    except Exception as e:
        logger.error(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}")

# üö® –û–±—Ä–æ–±–∫–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞:", exc_info=context.error)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_article))
    app.add_error_handler(error_handler)

    print("ü§ñ Biom Assistant –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é –∞—Ä—Ç–∏–∫—É–ª –≤ Telegram...")
    app.run_polling()
